<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LittleForker</name>
    </assembly>
    <members>
        <member name="T:LittleForker.CooperativeShutdown">
            <summary>
                Allows a process to be co-cooperatively shut down (as opposed the more
                brutal Process.Kill()
            </summary>
        </member>
        <member name="M:LittleForker.CooperativeShutdown.GetPipeName(System.Int32)">
            <summary>
                The pipe name a process will listen on for a EXIT signal.
            </summary>
            <param name="processId">The process ID process listening.</param>
            <returns>A generated pipe name.</returns>
        </member>
        <member name="M:LittleForker.CooperativeShutdown.Listen(System.Action,Microsoft.Extensions.Logging.ILoggerFactory,System.Action{System.Exception})">
            <summary>
                Creates a listener for cooperative shutdown.
            </summary>
            <param name="shutdownRequested">
                The callback that is invoked when cooperative shutdown has been
                requested.
            </param>
            <param name="loggerFactory">
                A logger factory.
            </param>
            <param name="onError">A method to be called if an error occurs while listening</param>
            <returns>
                A disposable representing the named pipe listener.
            </returns>
        </member>
        <member name="M:LittleForker.CooperativeShutdown.SignalExit(System.Int32,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Signals to a process to shut down.
            </summary>
            <param name="processId">The process ID to signal too.</param>
            <param name="loggerFactory">A logger factory.</param>
            <returns>A task representing the operation.</returns>
        </member>
        <member name="T:LittleForker.InterlockedBoolean">
            <summary>
            Interlocked support for boolean values
            </summary>
        </member>
        <member name="P:LittleForker.InterlockedBoolean.Value">
            <summary>
            Current value
            </summary>
        </member>
        <member name="M:LittleForker.InterlockedBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:InterlockedBoolean"/>
            </summary>
            <param name="initialValue">initial value</param>
        </member>
        <member name="M:LittleForker.InterlockedBoolean.Set(System.Boolean)">
            <summary>
            Sets a new value
            </summary>
            <param name="newValue">new value</param>
            <returns>the original value before any operation was performed</returns>
        </member>
        <member name="M:LittleForker.InterlockedBoolean.CompareExchange(System.Boolean,System.Boolean)">
            <summary>
            Compares the current value and the comparand for equality and, if they are equal, 
            replaces the current value with the new value in an atomic/thread-safe operation.
            </summary>
            <param name="newValue">new value</param>
            <param name="comparand">value to compare the current value with</param>
            <returns>the original value before any operation was performed</returns>
        </member>
        <member name="P:LittleForker.IProcessInfo.ExitCode">
            <summary>
                The process's exit code.
            </summary>
        </member>
        <member name="P:LittleForker.IProcessInfo.Id">
            <summary>
                The process's Id.
            </summary>
        </member>
        <member name="T:LittleForker.ProcessExitedHelper">
            <summary>
                Helper that raises event when the process has exited. A wrapper around
                Process.Exited with some error handling and logging.
            </summary>
        </member>
        <member name="M:LittleForker.ProcessExitedHelper.#ctor(System.Int32,System.Action{LittleForker.ProcessExitedHelper},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
                Initializes a new instance of <see cref="T:LittleForker.ProcessExitedHelper"/>
            </summary>
            <param name="processId">
                The process Id of the process to watch for exited.
            </param>
            <param name="processExited">
                A callback that is invoked when process has exited or does not
                exist with the <see cref="T:LittleForker.ProcessExitedHelper"/> instance as a
                parameter.
            </param>
            <param name="loggerFactory">
                A logger.
            </param>
        </member>
        <member name="T:LittleForker.ProcessRunType">
            <summary>
            Defined how a process is expected to run.
            </summary>
        </member>
        <member name="F:LittleForker.ProcessRunType.SelfTerminating">
            <summary>
                Processes that are expected to terminate of their own accord.
            </summary>
        </member>
        <member name="F:LittleForker.ProcessRunType.NonTerminating">
            <summary>
                Processes that are not expected to terminiate of their own
                accord and that must be co-operatively shutdown or killed.
            </summary>
        </member>
        <member name="T:LittleForker.ProcessSupervisor">
            <summary>
                Launches an process and tracks it's lifecycle .
            </summary>
        </member>
        <member name="T:LittleForker.ProcessSupervisor.State">
            <summary>
                The state a process is in.
            </summary>
        </member>
        <member name="M:LittleForker.ProcessSupervisor.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,LittleForker.ProcessRunType,System.String,System.String,System.String,System.Collections.Specialized.StringDictionary,System.Boolean)">
            <summary>
                Initializes a new instance of <see cref="T:LittleForker.ProcessSupervisor"/>
            </summary>
            <param name="workingDirectory">
                The working directory to start the process in.
            </param>
            <param name="processPath">
                The path to the process.
            </param>
            <param name="processRunType">
                The process run type.
            </param>
            <param name="loggerFactory">
                A logger factory.
            </param>
            <param name="arguments">
                Arguments to be passed to the process.
            </param>
            <param name="environmentVariables">
                Environment variables that are set before the process starts.
            </param>
            <param name="captureStdErr">
                A flag to indicated whether to capture standard error output.
            </param>
        </member>
        <member name="P:LittleForker.ProcessSupervisor.OnStartException">
            <summary>
                Contains the caught exception in the event a process failed to
                be launched.
            </summary>
        </member>
        <member name="P:LittleForker.ProcessSupervisor.ProcessInfo">
            <summary>
                Information about the launched process.
            </summary>
        </member>
        <member name="E:LittleForker.ProcessSupervisor.OutputDataReceived">
            <summary>
                Raised when the process emits console data.
            </summary>
        </member>
        <member name="E:LittleForker.ProcessSupervisor.ErrorDataReceived">
            <summary>
                Raised when the process emits stderr console data.
            </summary>
        </member>
        <member name="E:LittleForker.ProcessSupervisor.StateChanged">
            <summary>
                Raised when the process state has changed.
            </summary>
        </member>
        <member name="M:LittleForker.ProcessSupervisor.Start">
            <summary>
                Starts the process.
            </summary>
        </member>
        <member name="M:LittleForker.ProcessSupervisor.Stop(System.Nullable{System.TimeSpan})">
            <summary>
                Initiates a process stop. If a timeout is supplied (and greater
                than 0ms), it will attempt a "co-operative" shutdown by
                signalling an EXIT command to the process. The process needs to
                support such signalling and needs to complete within the timeout
                otherwise the process will be terminated via Kill(). The maximum
                recommended timeout is 25 seconds. This is 5 seconds less than
                default 30 seconds that windows will consider a service to be
                'hung'.
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:LittleForker.TaskQueue">
            <summary>
                Represents a queue of tasks where a task is processed one at a time. When disposed
                the outstanding tasks are cancelled.
            </summary>
        </member>
        <member name="M:LittleForker.TaskQueue.Enqueue(System.Action)">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="action">The operations to invoke.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
        <member name="M:LittleForker.TaskQueue.Enqueue``1(System.Func{``0})">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="function">The operations to invoke.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
        <member name="M:LittleForker.TaskQueue.Enqueue(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="function">The operation to invoke that is co-operatively cancelable.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
        <member name="M:LittleForker.TaskQueue.Enqueue``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
                Enqueues a task for processing.
            </summary>
            <param name="function">The operation to invoke that is co-operatively cancelable.</param>
            <returns>A task representing the operation. Awaiting is optional.</returns>
        </member>
    </members>
</doc>
