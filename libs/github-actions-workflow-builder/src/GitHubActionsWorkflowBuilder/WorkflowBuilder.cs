namespace Logicality.GitHubActionsWorkflowBuilder;

public class WorkflowBuilder
{
    private readonly string                         _name;
    private readonly List<Trigger>                  _triggers = new();
    private readonly Dictionary<string, JobBuilder> _jobs     = new();

    public WorkflowBuilder(string name)
    {
        _name = name;
    }

    public IVcsTrigger OnPullRequest()
    {
        var trigger = new VcsTrigger("pull_request", this);
        _triggers.Add(trigger);
        return trigger;
    }

    public IVcsTrigger OnPush()
    {
        var trigger = new VcsTrigger("push", this);
        _triggers.Add(trigger);
        return trigger;
    }

    public WorkflowBuilder OnEvent(string eventName, params string[] types)
    {
        var trigger = new EventTriggerBuilder(eventName, types, this);
        _triggers.Add(trigger);
        return this;
    }

    public WorkflowBuilder OnSchedule(string cron)
    {
        var scheduleTriggerBuilder = new ScheduleTrigger("schedule", cron, this);
        _triggers.Add(scheduleTriggerBuilder);
        return this;
    }

    public IWorkflowCallTrigger OnWorkflowCall()
    {
        var trigger = new WorkflowCallTrigger(this);
        _triggers.Add(trigger);
        return trigger;
    }

    public IJobBuilder AddJob(string jobId)
    {
        var job = new JobBuilder(jobId);
        _jobs.Add(jobId, job);
        return job;
    }

    public string Generate()
    {
        var writer = new WorkflowWriter();
        writer.WriteLine("# This was generated by a tool (Logicality GitHub Actions Workflow Builder).");
        writer.WriteLine("# Edits will be overwritten.").WriteLine("");
        writer.WriteLine($"name: {_name}").WriteLine("");

        if (_triggers.Any())
        {
            writer.WriteLine("on:");
        }

        foreach (var trigger in _triggers)
        {
            using (writer.Indent())
            {
                trigger.Write(writer);
            }
        }

        if (_jobs.Any())
        {
            writer.WriteLine("");
            writer.WriteLine("jobs:");
            foreach (var job in _jobs)
            {
                using var _ = writer.Indent();
                writer.WriteLine($"{job.Key}:");
                using var __ = writer.Indent();
                job.Value.Write(writer);
            }
        }

        return writer.ToString();
    }

    private abstract class Trigger : ITrigger
    {
        protected Trigger(string eventName, WorkflowBuilder workflowBuilder)
        {
            EventName  = eventName;
            WorkflowBuilder = workflowBuilder;
        }

        public string          EventName       { get; }
        public WorkflowBuilder WorkflowBuilder { get; }

        public abstract void Write(WorkflowWriter writer);
    }

    private class VcsTrigger : Trigger, IVcsTrigger
    {
        private string[] _branches       = Array.Empty<string>();
        private string[] _branchesIgnore = Array.Empty<string>();
        private string[] _paths          = Array.Empty<string>();
        private string[] _pathsIgnore    = Array.Empty<string>();
        private string[] _tags           = Array.Empty<string>();
        private string[] _tagsIgnore     = Array.Empty<string>();

        public VcsTrigger(string eventName, WorkflowBuilder workflowBuilder)
            : base(eventName, workflowBuilder)
        {
        }

        public IVcsTrigger Branches(params string[] branches)
        {
            _branches = branches;
            return this;
        }

        public IVcsTrigger BranchesIgnore(params string[] branches)
        {
            _branchesIgnore = branches;
            return this;
        }

        public IVcsTrigger Paths(params string[] paths)
        {
            _paths = paths;
            return this;
        }

        public IVcsTrigger PathsIgnore(params string[] paths)
        {
            _pathsIgnore = paths;
            return this;
        }

        public IVcsTrigger Tags(params string[] tags)
        {
            _tags = tags;
            return this;
        }

        public IVcsTrigger TagsIgnore(params string[] tags)
        {
            _tagsIgnore = tags;
            return this;
        }

        public override void Write(WorkflowWriter writer)
        {
            writer.WriteLine($"{EventName}:");
            using var _ = writer.Indent();

            if (_branches.Any())
            {
                writer.WriteLine("branches:");
                foreach (var branch in _branches)
                {
                    writer.WriteLine($"- {branch}");
                }
            }
            if (_branchesIgnore.Any())
            {
                writer.WriteLine("branches-ignore:");
                foreach (var branch in _branchesIgnore)
                {
                    writer.WriteLine($"- {branch}");
                }
            }

            if (_paths.Any())
            {
                writer.WriteLine("paths:");
                foreach (var path in _paths)
                {
                    writer.WriteLine($"- {path}");
                }
            }
            if (_pathsIgnore.Any())
            {
                writer.WriteLine("paths-ignore:");
                foreach (var path in _pathsIgnore)
                {
                    writer.WriteLine($"- {path}");
                }
            }

            if (_tags.Any())
            {
                writer.WriteLine("tags:");
                foreach (var tags in _tags)
                {
                    writer.WriteLine($"- {tags}");
                }
            }
            if (_tagsIgnore.Any())
            {
                writer.WriteLine("tags-ignore:");
                foreach (var tags in _tagsIgnore)
                {
                    writer.WriteLine($"- {tags}");
                }
            }
        }
    }

    private class ScheduleTrigger: Trigger
    {
        private readonly string _cron;

        public ScheduleTrigger(
            string eventName, 
            string cron,
            WorkflowBuilder workflowBuilder)
            : base(eventName, workflowBuilder)
        {
            _cron = cron;
        }

        public override void Write(WorkflowWriter writer)
        {
            writer.WriteLine($"{EventName}:");
            using var _ = writer.Indent();
            writer.WriteLine($"- cron: {_cron}");
        }
    }

    private class EventTriggerBuilder : Trigger
    {
        private readonly string[] _types;

        public EventTriggerBuilder(
            string          eventName,
            string[]        types,
            WorkflowBuilder workflowBuilder)
            : base(eventName, workflowBuilder)
        {
            _types = types;
        }

        public override void Write(WorkflowWriter writer)
        {
            writer.WriteLine($"{EventName}:");
            using var _ = writer.Indent();
            writer.WriteLine($"types: [{string.Join(", ", _types)}]");
        }
    }

    private class WorkflowCallTrigger : Trigger, IWorkflowCallTrigger
    {
        private readonly Dictionary<string, InputInfo>  _inputs  = new();
        private readonly Dictionary<string, OutputInfo> _outputs = new();
        private readonly Dictionary<string, SecretInfo> _secrets = new();

        public WorkflowCallTrigger(WorkflowBuilder workflowBuilder)
            : base("workflow_call", workflowBuilder)
        {
        }
       
        public IWorkflowCallTrigger Inputs(
            string           id,
            string           description,
            string           @default,
            bool             required,
            WorkflowCallType type)
        {
            _inputs.Add(id, new InputInfo(id, description, @default, required, type));
            return this;
        }

        public IWorkflowCallTrigger Outputs(
            string id,
            string description,
            string value)
        {
            _outputs.Add(id, new OutputInfo(id, description, value));
            return this;
        }

        public IWorkflowCallTrigger Secrets(
            string id,
            string description,
            bool required)
        {
            _secrets.Add(id, new SecretInfo(id, description, required));
            return this;
        }

        public override void Write(WorkflowWriter writer)
        {
            writer.WriteLine($"{EventName}:");
            using var _ = writer.Indent();

            if (_inputs.Any())
            {
                writer.WriteLine("inputs:");
                using var __ = writer.Indent();
                foreach (var input in _inputs)
                {
                    writer.WriteLine($"{input.Key}:");
                    using var ___ = writer.Indent();
                    writer.WriteLine($"description: {input.Value.Description}");
                    writer.WriteLine($"default: {input.Value.Default}");
                    writer.WriteLine($"required: {input.Value.Required}");
                    writer.WriteLine($"type: {input.Value.Type.ToString().ToLower()}");
                }
            }

            if (_outputs.Any())
            {
                writer.WriteLine("outputs:");
                using var __ = writer.Indent();
                foreach (var output in _outputs)
                {
                    writer.WriteLine($"{output.Key}:");
                    using var ___ = writer.Indent();
                    writer.WriteLine($"description: {output.Value.Description}");
                    writer.WriteLine($"value: {output.Value.Value}");
                }
            }

            if (_secrets.Any())
            {
                writer.WriteLine("secrets:");
                using var __ = writer.Indent();
                foreach (var secret in _secrets)
                {
                    writer.WriteLine($"{secret.Key}:");
                    using var ___ = writer.Indent();
                    writer.WriteLine($"description: {secret.Value.Description}");
                    writer.WriteLine($"required: {secret.Value.Required.ToString().ToLower()}");
                }
            }
        }

        private record InputInfo(string Id, string Description, string Default, bool Required, WorkflowCallType Type);

        private record OutputInfo(string Id, string Description, string Value);

        private record SecretInfo(string Id, string Description, bool Required);
    }


    private class JobBuilder : IJobBuilder
    {
        private readonly string                               _jobId;
        private          string                               _runsOn;
        private          IDictionary<string, string>          _environment      = new Dictionary<string, string>();
        private readonly List<StepBuilder>                    _steps            = new();
        private          PermissionConfig                     _permissionConfig = PermissionConfig.NotSpecified;
        private readonly Dictionary<string, Permission>       _permissions      = new();
        private          string?                              _concurrencyGroup;
        private          bool                                 _concurrencyCancelInProgress;

        public JobBuilder(string jobId)
        {
            _jobId = jobId;
        }

        public IJobBuilder RunsOn(string runsOn)
        {
            _runsOn = runsOn;
            return this;
        }

        public IJobBuilder WithEnvironment(IDictionary<string, string> environment)
        {
            _environment = environment;
            return this;
        }

        public IJobBuilder Permissions(
            Permission actions     = Permission.None,
            Permission checks      = Permission.None,
            Permission contents    = Permission.None,
            Permission deployments = Permission.None,
            Permission discussions = Permission.None,
            Permission idToken = Permission.None,
            Permission issues = Permission.None,
            Permission packages = Permission.None,
            Permission pages = Permission.None,
            Permission pullRequests = Permission.None,
            Permission repositoryProjects = Permission.None,
            Permission securityEvents = Permission.None,
            Permission statuses = Permission.None)
        {
            _permissions[PermissionKeys.Actions]            = actions;
            _permissions[PermissionKeys.Checks]             = checks;
            _permissions[PermissionKeys.Contents]           = contents;
            _permissions[PermissionKeys.Deployments]        = deployments;
            _permissions[PermissionKeys.Discussions]        = discussions;
            _permissions[PermissionKeys.IdToken]            = idToken;
            _permissions[PermissionKeys.Issues]             = issues;
            _permissions[PermissionKeys.Packages]           = packages;
            _permissions[PermissionKeys.Pages]              = pages;
            _permissions[PermissionKeys.PullRequests]       = pullRequests;
            _permissions[PermissionKeys.RepositoryProjects] = repositoryProjects;
            _permissions[PermissionKeys.SecurityEvents]     = securityEvents;
            _permissions[PermissionKeys.Statuses]           = statuses;

            _permissionConfig = PermissionConfig.Custom;

            return this;
        }

        public IJobBuilder Concurrency(string @group, bool cancelInProgress = false)
        {
            _concurrencyGroup            = @group;
            _concurrencyCancelInProgress = cancelInProgress;
            return this;
        }

      

        public IJobBuilder PermissionsReadAll()
        {
            _permissionConfig = PermissionConfig.ReadAll;
            return this;
        }

        public IJobBuilder PermissionsWriteAll()
        {
            _permissionConfig = PermissionConfig.WriteAll;
            return this;
        }

        public IStepBuilder AddStep(string name)
        {
            var step = new StepBuilder(name, this);
            _steps.Add(step);
            return step;
        }

        public void Write(WorkflowWriter writer)
        {
            writer.WriteLine($"runs-on: {_runsOn}");
            if (_environment.Any())
            {
                writer.WriteLine("env:");
                using (writer.Indent())
                {
                    foreach (var env in _environment)
                    {
                        writer.WriteLine($"{env.Key}: {env.Value}");
                    }
                }
            }

            if (_permissionConfig == PermissionConfig.ReadAll)
            {
                writer.WriteLine("permissions: read-all");
            }
            else if (_permissionConfig == PermissionConfig.WriteAll)
            {
                writer.WriteLine("permissions: write-all");
            }
            else if (_permissionConfig == PermissionConfig.Custom)
            {
                writer.WriteLine("permissions:");
                using var _ = writer.Indent();
                foreach (var permission in _permissions)
                {
                    if (permission.Value != Permission.None)
                    {
                        writer.WriteLine($"{permission.Key}: {permission.Value.ToString().ToLower()}");
                    }
                }
            }

            if (!string.IsNullOrWhiteSpace(_concurrencyGroup))
            {
                writer.WriteLine("concurrency:");
                using var _ = writer.Indent();
                writer.WriteLine($"group: {_concurrencyGroup}");
                if (_concurrencyCancelInProgress)
                {
                    writer.WriteLine("cancel-in-progress: true");
                }
            }

            if (_steps.Any())
            {
                writer.WriteLine("");
                writer.WriteLine("steps:");
                foreach (var step in _steps)
                {
                    writer.WriteLine("");
                    step.Write(writer);
                }
            }
        }

        private enum PermissionConfig
        {
            NotSpecified,
            ReadAll,
            WriteAll,
            Custom
        }

        private static class PermissionKeys
        {
            public const string Actions = "actions";
            public const string Checks = "checks";
            public const string Contents = "contents";
            public const string Deployments = "deployments";
            public const string IdToken = "id-token";
            public const string Issues = "issues";
            public const string Discussions = "discussions";
            public const string Packages = "packages";
            public const string Pages = "pages";
            public const string PullRequests = "pull-requests";
            public const string RepositoryProjects = "repository-projects";
            public const string SecurityEvents = "security-events";
            public const string Statuses = "statuses";
        }
    }

    private class StepBuilder : IStepBuilder
    {
        private readonly string                 _name;
        private          string?                _conditional;
        private          string?                _uses;
        private readonly List<(string, string)> _with = new();
        private          string?                _run;
        private          string?                _shell;

        public StepBuilder(string name, IJobBuilder job)
        {
            _name = name;
            Job   = job;
        }

        public IJobBuilder Job { get; }

        public IStepBuilder If(string conditional)
        {
            _conditional = conditional;
            return this;
        }

        public IStepBuilder Uses(string uses)
        {
            _uses = uses;
            return this;
        }

        public IStepBuilder With(string name, string value)
        { 
            _with.Add((name, value));
            return this;
        }

        public IStepBuilder Run(string run)
        {
            _run = run;
            return this;
        }

        public IStepBuilder Shell(string shell)
        {
            _shell = shell;
            return this;
        }

        public void Write(WorkflowWriter writer)
        {
            writer.WriteLine($"- name: {_name}");
            if (!string.IsNullOrWhiteSpace(_conditional))
            {
                using var _ = writer.Indent();
                writer.WriteLine($"if: {_conditional}");
            }

            if (!string.IsNullOrWhiteSpace(_uses))
            {
                using var _ = writer.Indent();
                writer.WriteLine($"uses: {_uses}");

                if (_with.Any())
                {
                    writer.WriteLine("with:");
                    using var __ = writer.Indent();
                    foreach (var (item1, item2) in _with)
                    {
                        writer.WriteLine($"{item1}: {item2}");
                    }
                }
            }

            if (!string.IsNullOrWhiteSpace(_run))
            {
                using var __ = writer.Indent();
                writer.WriteLine($"run: {_run}");
            }

            if (!string.IsNullOrWhiteSpace(_shell))
            {
                using var __ = writer.Indent();
                writer.WriteLine($"shell: {_shell}");
            }
        }
    }
}