using System.Collections.Generic;
using Shouldly;
using Xunit;

namespace Logicality.GitHubActionsWorkflowBuilder;

public class WorkflowBuilderTests
{

    [Fact]
    public void Can_generate_workflow()
    {
        var workflow = new WorkflowBuilder("my-workflow");

        workflow.OnPullRequest()
            .Branches("main", "dev")
            .BranchesIgnore("feature/")
            .Paths("libs/foo**", "build/**")
            .PathsIgnore("docs/")
            .Tags("foo-**")
            .TagsIgnore("release/**");

        workflow.OnPush()
            .Branches("main")
            .Paths("**")
            .Tags("'foo-**'");

        var job = workflow.AddJob("build")
            .RunsOn("ubuntu-latest")
            .WithEnvironment(new Dictionary<string, string>
            {
                { "GITHUB_TOKEN", "${{secrets.GITHUB_TOKEN}}" }
            });

        job.Checkout();

        job.LogIntoGitHubContainerRegistry();

        job.PrintEnvironment();

        job.AddStep("Push")
            .If("github.event_name == 'push'")
            .Run("./build.ps1 push")
            .ShellPowerShell();

        var actual = workflow.Generate();

        var expected = @"# This was generated by a tool (Logicality GitHub Actions Workflow Builder).
# Edits will be overwritten.

name: my-workflow

on:
  pull_request:
    branches:
    - main
    - dev
    branches-ignore:
    - feature/
    paths:
    - libs/foo**
    - build/**
    paths-ignore:
    - docs/
    tags:
    - foo-**
    tags-ignore:
    - release/**
  push:
    branches:
    - main
    paths:
    - **
    tags:
    - 'foo-**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Log into GitHub Container Registry
      run: echo ""${{secrets.GITHUB_TOKEN}}"" | docker login ghcr.io -u ${{github.actor}} --password-stdin

    - name: Print Environment
      run: printenv
      shell: bash

    - name: Push
      if: github.event_name == 'push'
      run: ./build.ps1 push
      shell: pwsh
";

        actual.ShouldBe(expected);
    }
}
