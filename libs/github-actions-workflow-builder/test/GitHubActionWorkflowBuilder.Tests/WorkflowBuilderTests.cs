using System.Collections.Generic;
using Logicality.GithubActionsWorkflowBuilder;
using Shouldly;
using Xunit;

namespace Logicality.GitHubActionsWorkflowBuilder;

public class WorkflowBuilderTests
{

    [Fact]
    public void Blah()
    {
        var workflow = new WorkflowBuilder("my-workflow");

        workflow.OnPullRequest()
            .Branches("main", "dev")
            .BranchesIgnore("feature/")
            .Paths("libs/foo**", "build/**")
            .PathsIgnore("docs/")
            .Tags("foo-**")
            .TagsIgnore("release/**");

        workflow.OnPush()
            .Branches("main")
            .Paths("**")
            .Tags("'foo-**'");

        var job = workflow.AddJob("build")
            .RunsOn("ubuntu-latest")
            .WithEnvironment(new Dictionary<string, string>
            {
                { "GITHUB_TOKEN", "${{secrets.GITHUB_TOKEN}}" }
            });

        job.AddStep()
            .Name("Checkout")
            .Uses("actions/checkout@v2")
            .With("fetch-depth", "0");
            
        var workflowString = workflow.Generate();

        var expected = @"# This was generated by a tool (Logicality GitHub Actions Workflow Builder).
# Edits will be overwritten.

name: my-workflow

on:
  pull_request:
    branches:
    - main
    - dev
    branches-ignore:
    - feature/
    paths:
    - libs/foo**
    - build/**
    paths-ignore:
    - docs/
    tags:
    - foo-**
    tags-ignore:
    - release/**
  push:
    branches:
    - main
    paths:
    - **
    tags:
    - 'foo-**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
";

        var actual = workflowString.ToString();

        actual.ShouldBe(expected);
    }
}
